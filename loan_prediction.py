# -*- coding: utf-8 -*-
"""LOAN PREDICTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q5I8B7TsKPrjAzuZGRgqjGhZ7v3cA16e
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_csv("/content/train_u6lujuX_CVtuZ9i.csv")
dataset.head()

dataset.info()
dataset.shape

dataset.describe()

dataset.isnull().sum()

dataset.isnull().sum()*100 / len(dataset)

dataset = dataset.drop('Loan_ID',axis=1)

dataset.head(1)

columns = ['Gender','Dependents','LoanAmount','Loan_Amount_Term']

dataset = dataset.dropna(subset=columns)

dataset['Self_Employed'].mode()[0]

dataset['Self_Employed'] =dataset['Self_Employed'].fillna(dataset['Self_Employed'].mode()[0])

dataset.isnull().sum()*100 / len(dataset)

dataset['Gender'].unique()

dataset['Self_Employed'].unique()

dataset['Credit_History'].mode()[0]

dataset['Credit_History'] =dataset['Credit_History'].fillna(dataset['Credit_History'].mode()[0])

dataset.isnull().sum()*100 / len(dataset)

dataset.sample(7)

dataset['Dependents'] =dataset['Dependents'].replace(to_replace="3+",value='4')

dataset['Dependents'].unique()

dataset['Loan_Status'].unique()

dataset['Gender'] = dataset['Gender'].map({'Male':1,'Female':0}).astype('int')
dataset['Married'] = dataset['Married'].map({'Yes':1,'No':0}).astype('int')
dataset['Education'] = dataset['Education'].map({'Graduate':1,'Not Graduate':0}).astype('int')
dataset['Self_Employed'] = dataset['Self_Employed'].map({'Yes':1,'No':0}).astype('int')
dataset['Property_Area'] = dataset['Property_Area'].map({'Rural':0,'Semiurban':2,'Urban':1}).astype('int')
dataset['Loan_Status'] = dataset['Loan_Status'].map({'Y':1,'N':0}).astype('int')

dataset.head()

X = dataset.drop('Loan_Status',axis=1)
y = dataset['Loan_Status']
y

dataset.head()

cols = ['ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term']

from sklearn.preprocessing import StandardScaler
st = StandardScaler()
X[cols]=st.fit_transform(X[cols])
X

from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score
import numpy as np

model_df={}
def model_val(model,X,y):
    X_train,X_test,y_train,y_test=train_test_split(X,y,
                                                   test_size=0.20,
                                                   random_state=42)
    model.fit(X_train,y_train)
    y_pred=model.predict(X_test)
    print(f"{model} accuracy is {accuracy_score(y_test,y_pred)}")
    
    score = cross_val_score(model,X,y,cv=5)
    print(f"{model} Avg cross val score is {np.mean(score)}")
    model_df[model]=round(np.mean(score)*100,2)

model_df

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model_val(model,X,y)

from sklearn import svm
model = svm.SVC()
model_val(model,X,y)

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model_val(model,X,y)

from sklearn.ensemble import RandomForestClassifier
model =RandomForestClassifier()
model_val(model,X,y)

from sklearn.ensemble import GradientBoostingClassifier
model =GradientBoostingClassifier()
model_val(model,X,y)

from sklearn.model_selection import RandomizedSearchCV

log_reg_grid={"C":np.logspace(-4,4,20),
             "solver":['liblinear']}

rs_log_reg=RandomizedSearchCV(LogisticRegression(),
                   param_distributions=log_reg_grid,
                  n_iter=20,cv=5,verbose=True)

rs_log_reg.fit(X,y)

rs_log_reg.best_score_

rs_log_reg.best_params_

svc_grid = {'C':[0.25,0.50,0.75,1],"kernel":["linear"]}

rs_svc=RandomizedSearchCV(svm.SVC(),
                  param_distributions=svc_grid,
                   cv=5,
                   n_iter=20,
                  verbose=True)

rs_svc.fit(X,y)

rs_svc.best_score_

rs_svc.best_params_

RandomForestClassifier()

rf_grid={'n_estimators':np.arange(10,1000,10),
  'max_features':['auto','sqrt'],
 'max_depth':[None,3,5,10,20,30],
 'min_samples_split':[2,5,20,50,100],
 'min_samples_leaf':[1,2,5,10]
 }

rs_rf=RandomizedSearchCV(RandomForestClassifier(),
                  param_distributions=rf_grid,
                   cv=5,
                   n_iter=20,
                  verbose=True)

rs_rf.fit(X,y)

rs_rf.best_score_

rs_rf.best_params_

X = dataset.drop('Loan_Status',axis=1)
y = dataset['Loan_Status']

rf = RandomForestClassifier(n_estimators=270,
 min_samples_split=5,
 min_samples_leaf=5,
 max_features='sqrt',
 max_depth=5)

rf.fit(X,y)

import joblib

joblib.dump(rf,'loan_status_predict')

model = joblib.load('loan_status_predict')

import pandas as pd
df = pd.DataFrame({
    'Gender':1,
    'Married':1,
    'Dependents':2,
    'Education':0,
    'Self_Employed':0,
    'ApplicantIncome':2889,
    'CoapplicantIncome':0.0,
    'LoanAmount':45,
    'Loan_Amount_Term':180,
    'Credit_History':0,
    'Property_Area':1
},index=[0])

df

result = model.predict(df)

if result==7:
    print("Loan Approved")
else:
    print("Loan Not Approved")